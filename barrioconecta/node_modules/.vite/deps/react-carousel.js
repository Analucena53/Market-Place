import {
  __commonJS,
  require_react
} from "./chunk-S2TLTWWO.js";

// node_modules/range/lib/range.js
var require_range = __commonJS({
  "node_modules/range/lib/range.js"(exports) {
    "use strict";
    function range(a, b, step) {
      if (arguments.length === 1) {
        b = a;
        a = 0;
      }
      step = step || 1;
      var x, r = [];
      for (x = a; (b - x) * step > 0; x += step) {
        r.push(x);
      }
      return r;
    }
    exports.range = range;
  }
});

// node_modules/debounce/index.js
var require_debounce = __commonJS({
  "node_modules/debounce/index.js"(exports, module) {
    function debounce(func, wait, immediate) {
      var timeout, args, context, timestamp, result;
      if (null == wait)
        wait = 100;
      function later() {
        var last = Date.now() - timestamp;
        if (last < wait && last >= 0) {
          timeout = setTimeout(later, wait - last);
        } else {
          timeout = null;
          if (!immediate) {
            result = func.apply(context, args);
            context = args = null;
          }
        }
      }
      ;
      var debounced = function() {
        context = this;
        args = arguments;
        timestamp = Date.now();
        var callNow = immediate && !timeout;
        if (!timeout)
          timeout = setTimeout(later, wait);
        if (callNow) {
          result = func.apply(context, args);
          context = args = null;
        }
        return result;
      };
      debounced.clear = function() {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
      };
      debounced.flush = function() {
        if (timeout) {
          result = func.apply(context, args);
          context = args = null;
          clearTimeout(timeout);
          timeout = null;
        }
      };
      return debounced;
    }
    debounce.debounce = debounce;
    module.exports = debounce;
  }
});

// node_modules/react-carousel/dist/Carousel.js
var require_Carousel = __commonJS({
  "node_modules/react-carousel/dist/Carousel.js"(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.getVisibleItemCount = exports.getIndexToScrollTo = exports.isNextButtonVisible = exports.isPrevButtonVisible = exports.getMaximumAccomodableItemCount = void 0;
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = /* @__PURE__ */ function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _range = require_range();
    var _debounce = require_debounce();
    var _debounce2 = _interopRequireDefault(_debounce);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var getMaximumAccomodableItemCount = exports.getMaximumAccomodableItemCount = function getMaximumAccomodableItemCount2(fullWidth, elementWidth, elementMargin) {
      return Math.floor(fullWidth / (elementWidth + elementMargin));
    };
    var isPrevButtonVisible = exports.isPrevButtonVisible = function isPrevButtonVisible2(firstVisibleIndex) {
      return firstVisibleIndex > 0;
    };
    var isNextButtonVisible = exports.isNextButtonVisible = function isNextButtonVisible2(totalItems, firstVisibleIndex, visibleItemCount) {
      return firstVisibleIndex < totalItems - visibleItemCount;
    };
    var getIndexToScrollTo = exports.getIndexToScrollTo = function getIndexToScrollTo2(direction, totalItems, visibleItemCount, firstVisibleIndex, scrollStepDistance) {
      var index = void 0;
      var itemsBeyondVisible = totalItems - firstVisibleIndex - visibleItemCount;
      var itemsBehindVisible = firstVisibleIndex;
      if (direction === "next") {
        index = firstVisibleIndex + (itemsBeyondVisible > scrollStepDistance ? scrollStepDistance : itemsBeyondVisible);
      } else if (direction === "previous") {
        index = firstVisibleIndex - (itemsBehindVisible > scrollStepDistance ? scrollStepDistance : itemsBehindVisible);
      } else {
        throw new Error("Unexpected state.");
      }
      return index;
    };
    var getVisibleItemCount = exports.getVisibleItemCount = function getVisibleItemCount2(totalItems, firstVisibleIndex, itemWidth, itemMargin, controlWidth, maxWidth) {
      var availableWidth = void 0;
      var visibleItemCount = void 0;
      availableWidth = maxWidth + itemMargin;
      var prevButtonVisible = isPrevButtonVisible(firstVisibleIndex);
      if (prevButtonVisible) {
        availableWidth -= controlWidth;
      }
      visibleItemCount = getMaximumAccomodableItemCount(availableWidth, itemWidth, itemMargin);
      var nextButtonVisible = isNextButtonVisible(totalItems, firstVisibleIndex, visibleItemCount);
      if (nextButtonVisible) {
        availableWidth -= controlWidth;
        visibleItemCount = getMaximumAccomodableItemCount(availableWidth, itemWidth, itemMargin);
      }
      return visibleItemCount;
    };
    var Carousel = function(_Component) {
      _inherits(Carousel2, _Component);
      function Carousel2(props) {
        _classCallCheck(this, Carousel2);
        var _this = _possibleConstructorReturn(this, (Carousel2.__proto__ || Object.getPrototypeOf(Carousel2)).call(this, props));
        _this.handleScrollToDirection = function(direction, visibleItemCount) {
          var index = getIndexToScrollTo(direction, _this.props.children.length, visibleItemCount, _this.state.firstVisibleIndex, _this.props.scrollStepDistance || visibleItemCount);
          _this.props.onItemScroll(index);
          _this.setState({
            firstVisibleIndex: index
          });
        };
        _this.getItemElement = function(item, key, index, visibleItemCount) {
          var visibleItemIndeces = (0, _range.range)(_this.state.firstVisibleIndex, visibleItemCount + _this.state.firstVisibleIndex);
          var isVisible = visibleItemIndeces.includes(index);
          var isLastAmongVisible = visibleItemIndeces.length === visibleItemIndeces.indexOf(index) + 1;
          if (!isVisible) {
            return null;
          }
          return _react2.default.createElement(
            "li",
            {
              key,
              style: {
                boxSizing: "border-box",
                display: "flex",
                listStyleType: "none",
                marginRight: isLastAmongVisible ? 0 : _this.props.itemMargin,
                width: _this.props.itemWidth
              }
            },
            item
          );
        };
        _this.captureWrapperElementReference = function(element) {
          if (element) {
            _this.wrapperElement = element;
          }
        };
        _this.state = {
          firstVisibleIndex: props.firstVisibleIndex || 0,
          maxWidth: 0
        };
        _this.resizeEventListener = (0, _debounce2.default)(function() {
          _this.setState({
            maxWidth: _this.wrapperElement.offsetWidth
          });
        }, 100);
        return _this;
      }
      _createClass(Carousel2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          if (!this.wrapperElement) {
            throw new Error("Unexpected state.");
          }
          var maxWidth = this.wrapperElement.offsetWidth;
          this.setState({
            maxWidth
          });
          window.addEventListener("resize", this.resizeEventListener);
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.resizeEventListener.clear();
          window.removeEventListener("resize", this.resizeEventListener);
        }
      }, {
        key: "render",
        value: function render() {
          var _this2 = this;
          var _props = this.props, controlWidth = _props.controlWidth, itemMargin = _props.itemMargin, children = _props.children, itemWidth = _props.itemWidth;
          var items = children;
          var itemCount = items.length;
          var visibleItemCount = getVisibleItemCount(itemCount, this.state.firstVisibleIndex, itemWidth, itemMargin, controlWidth, this.state.maxWidth);
          var prevButtonVisible = visibleItemCount === 0 ? false : isPrevButtonVisible(this.state.firstVisibleIndex);
          var nextButtonVisible = visibleItemCount === 0 ? false : isNextButtonVisible(itemCount, this.state.firstVisibleIndex, visibleItemCount);
          var carouselStyle = _extends({
            boxSizing: "border-box",
            display: "flex",
            flexFlow: "row wrap",
            flexGrow: 1,
            overflow: "hidden"
          }, this.props.style);
          var navigationButtonStyle = {
            boxSizing: "border-box",
            height: "inherit",
            margin: 0,
            padding: 0,
            width: controlWidth
          };
          var navigationButtonPreviousStyle = _extends({}, navigationButtonStyle, {
            display: prevButtonVisible ? "flex" : "none"
          });
          var navigationButtonNextStyle = _extends({}, navigationButtonStyle, {
            display: nextButtonVisible ? "flex" : "none"
          });
          var bodyStyle = {
            display: "flex",
            flexFlow: "row wrap",
            margin: 0,
            padding: 0
          };
          return _react2.default.createElement(
            "div",
            {
              className: "react-carousel",
              ref: this.captureWrapperElementReference,
              style: carouselStyle
            },
            _react2.default.createElement("div", {
              className: "react-carousel__navigation-button react-carousel__navigation-button--previous",
              onClick: function onClick() {
                _this2.handleScrollToDirection("previous", visibleItemCount);
              },
              style: navigationButtonPreviousStyle
            }),
            _react2.default.createElement(
              "ul",
              { style: bodyStyle },
              items.map(function(item, index) {
                if (!item.key) {
                  throw new Error('react-carousel children must have a "key" property. https://facebook.github.io/react/docs/lists-and-keys.html');
                }
                return _this2.getItemElement(item, item.key, index, visibleItemCount);
              })
            ),
            _react2.default.createElement("div", {
              className: "react-carousel__navigation-button react-carousel__navigation-button--next",
              onClick: function onClick() {
                _this2.handleScrollToDirection("next", visibleItemCount);
              },
              style: navigationButtonNextStyle
            })
          );
        }
      }]);
      return Carousel2;
    }(_react.Component);
    Carousel.defaultProps = {
      controlWidth: 30,
      firstVisibleIndex: 0,
      itemMargin: 0,
      itemWidth: 50,
      onItemScroll: function onItemScroll() {
      },
      scrollStepDistance: null
    };
    exports.default = Carousel;
  }
});
export default require_Carousel();
//# sourceMappingURL=react-carousel.js.map
